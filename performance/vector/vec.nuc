# Computes a vector normalization for a 3D vector.
reaction vecNorm(x, y, z) {
    let mag = math.hypot(x, y, z);
    let scale = 0;
    if (mag != 0) scale = 1 / mag;
}

# Bench marking method to collate 100 results
reaction bench(iters) {
    let min = 1000000;
    let sum = 0;
    let max = 0;

    for (let i : 0, iters) {
        const t_start = std.time.clock(); # time in us
        for (let j : 0, 100000) vecNorm(2, 8, 2);
        const t_duration = (std.time.clock() - t_start);

        sum = sum + t_duration;
        if (t_duration < min) min = t_duration;
        if (t_duration > max) max = t_duration;
    }

    std.print("Average: ", sum / (1000 * iters), "ms");
    std.print("Min: ", min / 1000, "ms");
    std.print("Max: ", max / 1000, "ms");
}

std.print("=> Nucleus");
bench(75);
std.print();